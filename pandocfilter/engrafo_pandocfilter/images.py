# -*- coding: utf-8 -*-
import re
import os
import subprocess
import uuid
import sys
from pandocfilters import Image, Para


PDF_REGEX = re.compile(r'^(.+)\.pdf$')
IMAGE_EXTENSIONS = [
    'jpg',
    'jpeg',
    'png',
    'svg',
    'bmp',
    'tiff',
    'pdf',
    'eps',
]


def append_image_extensions(key, val, fmt, meta):
    '''
    Often LaTeX authors don't include the image file extension,
    e.g. \includegraphics{eps/teaser}

    Here we loop through a list of image formats and append the
    first one we have a file for.
    '''
    if key == 'Image':
        image_path = val[2][0]
        image_filename = image_path.split('/')[-1]
        if '.' not in image_filename:
            for extension in IMAGE_EXTENSIONS:
                proposed = '%s.%s' % (image_path, extension)
                if os.path.exists(proposed):
                    val[2][0] = proposed
                    return Image(*val)


def tikz2image(tikz_src, prefix):
    '''
    Render tikzpicture as SVG.
    '''
    try:
        tex_filename = '%s.tex' % prefix
        pdf_filename = '%s.pdf' % prefix
        svg_filename = '%s.svg' % prefix
        with open(tex_filename, 'w') as f:
            f.write('''\\documentclass{standalone}
                     \\usepackage{tikz}
                     \\usetikzlibrary{shapes}
                     \\begin{document}
                     ''')
            f.write(tikz_src)
            f.write('\n\\end{document}\n')
        try:
            subprocess.check_output(
                ['pdflatex', '-interaction=nonstopmode', tex_filename])
        except subprocess.CalledProcessError as e:
            # an actual error occurred
            if "Fatal error occurred" in e.output:
                print >>sys.stderr, e.output
                raise
            # pdflatex tends to return 1 regardless
            pass
        pdf2svg(pdf_filename, svg_filename)
    finally:
        for filename in [
                tex_filename, pdf_filename,
                '%s.aux' % prefix, '%s.log' % prefix]:
            if os.path.exists(filename):
                os.remove(filename)


def replace_tikz_images(key, val, fmt, meta):
    '''
    Replace tikzpictures with SVGs and change the div format
    generated by our pandoc fork to match that of images.
    '''

    if (key == 'Div'
        and 'tikzpicture' in val[0][1]
        and val[1]
        and val[1][0]
        and isinstance(val[1][0], dict)
            and val[1][0]['t'] == 'RawBlock'):
        code = val[1][0]['c'][1]

        if re.match(r'\\begin\{tikzpicture\}', code):
            prefix = 'tikz-%s' % str(uuid.uuid4())
            svg_filename = '%s.svg' % prefix
            tikz2image(code, prefix)

            if len(val[1]) > 1:
                caption = val[1][1]['c']
            else:
                caption = []

            return Para([Image(['', [], []], caption, [svg_filename, ''])])


def replace_pdf_images(key, val, fmt, meta):
    '''
    Replace PDFs with SVGs.
    '''
    if key == 'Image':
        image_path = val[2][0]
        match = PDF_REGEX.match(image_path)
        if match:
            prefix = match.group(1)
            svg_path = '%s.svg' % prefix
            pdf2svg(image_path, svg_path)
            val[2][0] = svg_path
            return Image(*val)


def pdf2svg(src, dest):
    subprocess.check_output([
        'pdf2svg',
        src,
        dest,
    ])
